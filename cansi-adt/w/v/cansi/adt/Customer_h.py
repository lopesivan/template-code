#!/usr/bin/env python
# -*- coding: utf-8 -*-




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.3'
__CHEETAH_versionTuple__ = (3, 2, 3, 'final', 0)
__CHEETAH_genTime__ = 1568016740.0608675
__CHEETAH_genTimestamp__ = 'Mon Sep  9 05:12:20 2019'
__CHEETAH_src__ = '../m/Customer_h.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Sep  9 05:12:10 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Customer_h(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Customer_h, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''#ifndef ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True),"upper",False)() # '${cmd.name.upper()}' on line 2, col 10
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name.upper()}')) # from line 2, col 10.
        write('''_H
#define ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True),"upper",False)() # '${cmd.name.upper()}' on line 3, col 10
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name.upper()}')) # from line 3, col 10.
        write('''_H

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"cmd.include",True)) > 0: # generated from line 5, col 1
            for i in range(0, len(VFSL([locals()]+SL+[globals(), builtin],"cmd.include",True))): # generated from line 6, col 1
                write('''#include "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"include",True)[i],"name",True) # '${cmd.include[i].name}' on line 7, col 12
                if _v is not None: write(_filter(_v, rawExpr='${cmd.include[i].name}')) # from line 7, col 12.
                write('''"
''')
        write('''
/*
A pointer to an incomplete type (hides the implementation details).
*/
typedef struct ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 14, col 16
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 14, col 16.
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.suffix",True) # '${cmd.suffix}' on line 14, col 27
        if _v is not None: write(_filter(_v, rawExpr='${cmd.suffix}')) # from line 14, col 27.
        write(''' *''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 14, col 42
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 14, col 42.
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.ptr",True) # '${cmd.ptr}' on line 14, col 53
        if _v is not None: write(_filter(_v, rawExpr='${cmd.ptr}')) # from line 14, col 53.
        write(''';

/*
Create a ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 17, col 10
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 17, col 10.
        write(''' and return a handle to it.
*/
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 19, col 1
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 19, col 1.
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.ptr",True) # '${cmd.ptr}' on line 19, col 12
        if _v is not None: write(_filter(_v, rawExpr='${cmd.ptr}')) # from line 19, col 12.
        write(''' create''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 19, col 29
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 19, col 29.
        if len(VFSL([locals()]+SL+[globals(), builtin],"cmd.ctor",True)) > 1: # generated from line 20, col 1
            write('''(''')
            for i in range(0, len(VFSL([locals()]+SL+[globals(), builtin],"cmd.ctor",True))-1): # generated from line 22, col 1
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"ctor",True)[i],"type",True) # '${cmd.ctor[i].type}' on line 23, col 1
                if _v is not None: write(_filter(_v, rawExpr='${cmd.ctor[i].type}')) # from line 23, col 1.
                write(''' ''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"ctor",True)[i],"name",True) # '${cmd.ctor[i].name}' on line 23, col 21
                if _v is not None: write(_filter(_v, rawExpr='${cmd.ctor[i].name}')) # from line 23, col 21.
                write(''', ''')
            _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"ctor",True)[-1],"type",True) # '${cmd.ctor[-1].type}' on line 25, col 1
            if _v is not None: write(_filter(_v, rawExpr='${cmd.ctor[-1].type}')) # from line 25, col 1.
            write(''' ''')
            _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"ctor",True)[-1],"name",True) # '${cmd.ctor[-1].name}' on line 25, col 22
            if _v is not None: write(_filter(_v, rawExpr='${cmd.ctor[-1].name}')) # from line 25, col 22.
            write(''');
''')
        else: # generated from line 26, col 1
            if len(VFSL([locals()]+SL+[globals(), builtin],"cmd.ctor",True)) == 0: # generated from line 27, col 1
                write('''();
''')
            else: # generated from line 29, col 1
                write('''(''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"ctor",True)[0],"type",True) # '${cmd.ctor[0].type}' on line 30, col 2
                if _v is not None: write(_filter(_v, rawExpr='${cmd.ctor[0].type}')) # from line 30, col 2.
                write(''' ''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd",True),"ctor",True)[0],"name",True) # '${cmd.ctor[0].name}' on line 30, col 22
                if _v is not None: write(_filter(_v, rawExpr='${cmd.ctor[0].name}')) # from line 30, col 22.
                write(''');
''')
        write('''
/*
Destroy the given ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 35, col 19
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 35, col 19.
        write(''' object.
All handles to it will be invalidated.
*/
void destroy''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 38, col 13
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 38, col 13.
        write('''(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 38, col 25
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 38, col 25.
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.ptr",True) # '${cmd.ptr}' on line 38, col 36
        if _v is not None: write(_filter(_v, rawExpr='${cmd.ptr}')) # from line 38, col 36.
        write(''' ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name.lower",True) # '${cmd.name.lower}' on line 38, col 47
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name.lower}')) # from line 38, col 47.
        write(''');

/*
Print the given ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 41, col 17
        if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 41, col 17.
        write(''' object.
*/
''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"cmd.ctor",True)) > 1: # generated from line 43, col 1
            write('''void display''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 44, col 13
            if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 44, col 13.
            write('''(''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True) # '${cmd.name}' on line 45, col 2
            if _v is not None: write(_filter(_v, rawExpr='${cmd.name}')) # from line 45, col 2.
            _v = VFSL([locals()]+SL+[globals(), builtin],"cmd.ptr",True) # '${cmd.ptr}' on line 45, col 13
            if _v is not None: write(_filter(_v, rawExpr='${cmd.ptr}')) # from line 45, col 13.
            write(''' ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"cmd.name",True),"lower",False)() # '${cmd.name.lower()}' on line 45, col 24
            if _v is not None: write(_filter(_v, rawExpr='${cmd.name.lower()}')) # from line 45, col 24.
            write(''');
''')
        write('''#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_Customer_h = 'respond'

## END CLASS DEFINITION

if not hasattr(Customer_h, '_initCheetahAttributes'):
    templateAPIClass = getattr(Customer_h,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Customer_h)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Customer_h()).run()


