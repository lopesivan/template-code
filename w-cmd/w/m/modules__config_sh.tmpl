\# modules/config.sh

function ${cmd.name}.config.load () {

    b.unset '${cmd.name}.config'

    _${cmd.name}.config.load_default_config

    return \$?
}

function _${cmd.name}.config.load_from_file () {

    local file="\$1"

    local number_of_tasks=\$(cat \$file | jq '.${cmd.name}[] .start' | wc -l)
    let number_of_tasks--
    for i in `seq 0 \$number_of_tasks`; do

        local command=\$(cat \$file |
            jq --raw-output ".${cmd.name}[\$i].command")

        local description=\$(cat \$file |
            jq --raw-output ".${cmd.name}[\$i].description")

        b.set "${cmd.name}.config.help_message_\$command" "\$description"
    done

    local name=\$(cat \$file | jq --raw-output ".id.name")

    local version=\$(cat \$file | jq --raw-output ".id.version")

    b.set "${cmd.name}.config.name" "\$name"
    b.set "${cmd.name}.config.version" "\$version"
    b.set "${cmd.name}.config.author" "`git config --get user.name`"
    b.set "${cmd.name}.config.email"  "`git config --get user.email`"

}

function _${cmd.name}.config.load_default_config () {

    b.set "${cmd.name}.config.help_message" '2'

    local file="\$(dirname \$(readlink -f \$(which ${cmd.name})))/etc/${cmd.name}doc.json"

    if [ -n "\$file" ]; then                   # se variavel nao nula
        if [ -e "\$file" ]; then               # se arquivo existe
            _${cmd.name}.config.load_from_file "\$file" # carrega arquivo

            return \$?
        else
            b.raise FileNotFoundException     # se arquivo nao encontrado
        fi
    else
        b.raise StringIsNullException         # se a variavel e nula
    fi

    return 1
}

\# vim: set ts=4 sw=4 tw=78 ft=sh:
