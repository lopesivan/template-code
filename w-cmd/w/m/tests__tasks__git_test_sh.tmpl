b.module.require unittest

\# test:
\# ${unicode.arrow} ${cmd.name} git --help
function b.test.${cmd.name}_git_long_option_help () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}_git__help.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} git --help"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} git --debug
function b.test.${cmd.name}_git_long_option_debug () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}_git__debug.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} git --debug"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}


\# test:
\# ${unicode.arrow} ${cmd.name} git --set-ssh-git
function b.test.${cmd.name}_git_long_option_set_ssh_git () {

  local tempdir=\$(mktemp -d -t testing.XXXX)
  local repname=test-repositorio

  cd \$tempdir
  git novo-repositorio-local \$repname
  cd \${tempdir}/\${repname}

  local output="\
git remote -v
git remote set-url origin git+ssh://git${unicode.at}github.com/lopesivan/\${repname}.git
git remote -v"

  local cmd="${cmd.name} git --set-ssh-git"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"

  rm -rf \${HOME}/git/\${repname}.git
  rm -rf \$tempdir

}
