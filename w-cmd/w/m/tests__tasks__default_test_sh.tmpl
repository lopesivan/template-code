b.module.require unittest

\# test:
\# ${unicode.arrow} ${cmd.name} completions
function b.test.${cmd.name}_default () {

  local output="Usage: ${cmd.name} [tasks] [options]"

  b.unittest.assert_equal \
    "\${output}" "\$(${cmd.name})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} --help
function b.test.${cmd.name}_long_option_help () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}__help.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} --help"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} --debug
function b.test.${cmd.name}_long_option_debug () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}__debug.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} --debug"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} --debug --list
function b.test.${cmd.name}_long_option_debug_list () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}__debug__list.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} --debug --list"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} --debug --add
function b.test.${cmd.name}_long_option_debug_add () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}__debug__add.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} --debug --add"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} --debug --add --list
function b.test.${cmd.name}_long_option_debug_add_list () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}__debug__add__list.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} --debug --add --list"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}

\# test:
\# ${unicode.arrow} ${cmd.name} --debug --list --add
function b.test.${cmd.name}_long_option_debug_list_add () {

  local f=\$(dirname \$(readlink -f \$(which ${cmd.name})))/tests/outfiles/${cmd.name}__debug__add__list.out

  local output="\$(cat \$f)"

  local cmd="${cmd.name} --debug --list --add"

  b.unittest.assert_equal \
    "\$output" "\$(\${cmd})"
}
