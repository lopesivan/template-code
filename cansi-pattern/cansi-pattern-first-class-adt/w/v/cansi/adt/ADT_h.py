#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.3'
__CHEETAH_versionTuple__ = (3, 2, 3, 'final', 0)
__CHEETAH_genTime__ = 1567995106.3289611
__CHEETAH_genTimestamp__ = 'Sun Sep  8 23:11:46 2019'
__CHEETAH_src__ = '../m/ADT_h.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Mar  8 03:24:22 2018'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ADT_h(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ADT_h, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''#ifndef ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"upper",False)() # '${adt.name.upper()}' on line 1, col 10
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.upper()}')) # from line 1, col 10.
        write('''_H
#define ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"upper",False)() # '${adt.name.upper()}' on line 2, col 10
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.upper()}')) # from line 2, col 10.
        write('''_H

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"adt.include",True)) > 0: # generated from line 4, col 1
            for i in range(0, len(VFSL([locals()]+SL+[globals(), builtin],"adt.include",True))): # generated from line 5, col 1
                write('''#include "''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"include",True)[i],"name",True) # '$adt.include[i].name' on line 6, col 12
                if _v is not None: write(_filter(_v, rawExpr='$adt.include[i].name')) # from line 6, col 12.
                write('''"
''')
        write('''
/*
A pointer to an incomplete type (hides the implementation details).
*/
typedef struct ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 13, col 16
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 13, col 16.
        write('''* ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 13, col 42
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 13, col 42.
        _v = VFSL([locals()]+SL+[globals(), builtin],"adt.ptr",True) # '${adt.ptr}' on line 13, col 66
        if _v is not None: write(_filter(_v, rawExpr='${adt.ptr}')) # from line 13, col 66.
        write(''';

/*
Create a ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 16, col 10
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 16, col 10.
        write(''' and return a handle to it.
*/
''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 18, col 1
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 18, col 1.
        _v = VFSL([locals()]+SL+[globals(), builtin],"adt.ptr",True) # '${adt.ptr}' on line 18, col 25
        if _v is not None: write(_filter(_v, rawExpr='${adt.ptr}')) # from line 18, col 25.
        write(''' create''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 18, col 42
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 18, col 42.
        if len(VFSL([locals()]+SL+[globals(), builtin],"adt.ctor",True)) > 1: # generated from line 19, col 1
            write('''(''')
            for i in range(0, len(VFSL([locals()]+SL+[globals(), builtin],"adt.ctor",True))-1): # generated from line 21, col 1
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"ctor",True)[i],"type",True) # '${adt.ctor[i].type}' on line 22, col 1
                if _v is not None: write(_filter(_v, rawExpr='${adt.ctor[i].type}')) # from line 22, col 1.
                write(''' ''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"ctor",True)[i],"name",True) # '${adt.ctor[i].name}' on line 22, col 21
                if _v is not None: write(_filter(_v, rawExpr='${adt.ctor[i].name}')) # from line 22, col 21.
                write(''', ''')
            _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"ctor",True)[-1],"type",True) # '${adt.ctor[-1].type}' on line 24, col 1
            if _v is not None: write(_filter(_v, rawExpr='${adt.ctor[-1].type}')) # from line 24, col 1.
            write(''' ''')
            _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"ctor",True)[-1],"name",True) # '${adt.ctor[-1].name}' on line 24, col 22
            if _v is not None: write(_filter(_v, rawExpr='${adt.ctor[-1].name}')) # from line 24, col 22.
            write(''');
''')
        else: # generated from line 25, col 1
            if len(VFSL([locals()]+SL+[globals(), builtin],"adt.ctor",True)) == 0: # generated from line 26, col 1
                write('''();
''')
            else: # generated from line 28, col 1
                write('''(''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"ctor",True)[0],"type",True) # '${adt.ctor[0].type}' on line 29, col 2
                if _v is not None: write(_filter(_v, rawExpr='${adt.ctor[0].type}')) # from line 29, col 2.
                write(''' ''')
                _v = VFN(VFN(VFSL([locals()]+SL+[globals(), builtin],"adt",True),"ctor",True)[0],"name",True) # '${adt.ctor[0].name}' on line 29, col 22
                if _v is not None: write(_filter(_v, rawExpr='${adt.ctor[0].name}')) # from line 29, col 22.
                write(''');
''')
        write('''
/*
Destroy the given ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 34, col 19
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 34, col 19.
        write(''' object.
All handles to it will be invalidated.
*/
void destroy''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 37, col 13
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 37, col 13.
        write('''(''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 38, col 2
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 38, col 2.
        _v = VFSL([locals()]+SL+[globals(), builtin],"adt.ptr",True) # '${adt.ptr}' on line 38, col 26
        if _v is not None: write(_filter(_v, rawExpr='${adt.ptr}')) # from line 38, col 26.
        write(''' ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"lower",False)() # '${adt.name.lower()}' on line 38, col 37
        if _v is not None: write(_filter(_v, rawExpr='${adt.name.lower()}')) # from line 38, col 37.
        write(''');

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"adt.ctor",True)) > 1: # generated from line 40, col 1
            write('''void show''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 41, col 10
            if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 41, col 10.
            write('''(''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"capitalize",False)() # '${adt.name.capitalize()}' on line 42, col 2
            if _v is not None: write(_filter(_v, rawExpr='${adt.name.capitalize()}')) # from line 42, col 2.
            _v = VFSL([locals()]+SL+[globals(), builtin],"adt.ptr",True) # '${adt.ptr}' on line 42, col 26
            if _v is not None: write(_filter(_v, rawExpr='${adt.ptr}')) # from line 42, col 26.
            write(''' ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"adt.name",True),"lower",False)() # '${adt.name.lower()}' on line 42, col 37
            if _v is not None: write(_filter(_v, rawExpr='${adt.name.lower()}')) # from line 42, col 37.
            write(''');
''')
        write('''#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_ADT_h = 'respond'

## END CLASS DEFINITION

if not hasattr(ADT_h, '_initCheetahAttributes'):
    templateAPIClass = getattr(ADT_h,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ADT_h)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ADT_h()).run()


