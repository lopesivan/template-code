#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1521269998.478744
__CHEETAH_genTimestamp__ = 'Sat Mar 17 03:59:58 2018'
__CHEETAH_src__ = '../m/Context_c.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Mar  8 03:24:23 2018'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class Context_c(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(Context_c, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#include "''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 1, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 1, col 12.
        write(u'''.h"

/* We need to know about or initial state: */
#include "''')
        _v = VFN(VFFSL(SL,"state.stop.name",True),"capitalize",False)() # u'${state.stop.name.capitalize()}' on line 4, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${state.stop.name.capitalize()}')) # from line 4, col 12.
        write(u'''State.h"

#include "''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 6, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 6, col 12.
        write(u'''StateInternal.h"
''')
        if len(VFFSL(SL,"state.context.include",True)) > 0: # generated from line 7, col 1
            for i in range(0, len(VFFSL(SL,"state.context.include",True))): # generated from line 8, col 1
                write(u'''#include "''')
                _v = VFN(VFN(VFFSL(SL,"state.context",True),"include",True)[i],"header",True) # u'${state.context.include[i].header}' on line 9, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${state.context.include[i].header}')) # from line 9, col 12.
                write(u'''"
''')
        write(u'''#include <stdlib.h>

#include "message.h" // DEBUG

struct ''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 16, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 16, col 8.
        write(u'''
{
    struct ''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 18, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 18, col 12.
        write(u'''State state;
''')
        if len(VFFSL(SL,"state.context.struct",True)) > 0: # generated from line 19, col 1
            for i in range(0, len(VFFSL(SL,"state.context.struct",True))): # generated from line 20, col 1
                write(u'''    ''')
                _v = VFN(VFN(VFFSL(SL,"state.context",True),"struct",True)[i],"type",True) # u'${state.context.struct[i].type}' on line 21, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${state.context.struct[i].type}')) # from line 21, col 5.
                write(u''' ''')
                _v = VFN(VFN(VFFSL(SL,"state.context",True),"struct",True)[i],"name",True) # u'${state.context.struct[i].name}' on line 21, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'${state.context.struct[i].name}')) # from line 21, col 37.
                write(u''';
''')
        write(u'''};

/* Estatico */
/* USING:
    ''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 28, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 28, col 5.
        write(u'''Ptr p = create''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 28, col 40
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 28, col 40.
        write(u'''();
    ''')
        _v = VFFSL(SL,"state.start.name",True) # u'${state.start.name}' on line 29, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${state.start.name}')) # from line 29, col 5.
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 29, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 29, col 24.
        write(u'''(p);
*/
#define MAX_NO_OF_''')
        _v = VFN(VFFSL(SL,"state.context.name",True),"upper",False)() # u'${state.context.name.upper()}' on line 31, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name.upper()}')) # from line 31, col 19.
        write(u'''S 2
static struct ''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 32, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 32, col 15.
        write(u''' objectPool[MAX_NO_OF_''')
        _v = VFN(VFFSL(SL,"state.context.name",True),"upper",False)() # u'${state.context.name.upper()}' on line 32, col 58
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name.upper()}')) # from line 32, col 58.
        write(u'''S];
static size_t numberOfObjects = 0;

''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 35, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 35, col 1.
        write(u'''Ptr create''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 35, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 35, col 32.
        write(u''' (void)
{
    message("** create''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 37, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 37, col 23.
        write(u''' **");

    ''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 39, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 39, col 5.
        write(u'''Ptr instance = NULL;

    if (numberOfObjects < MAX_NO_OF_''')
        _v = VFN(VFFSL(SL,"state.context.name",True),"upper",False)() # u'${state.context.name.upper()}' on line 41, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name.upper()}')) # from line 41, col 37.
        write(u'''S)
    {
        instance = &objectPool[numberOfObjects++];
        /* Initialize the object... */

        /* Specify the initial state. */
        ''')
        _v = VFFSL(SL,"state.transitionTo.name",True) # u'${state.transitionTo.name}' on line 47, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${state.transitionTo.name}')) # from line 47, col 9.
        _v = VFN(VFFSL(SL,"state.stop.name",True),"capitalize",False)() # u'${state.stop.name.capitalize()}' on line 47, col 35
        if _v is not None: write(_filter(_v, rawExpr=u'${state.stop.name.capitalize()}')) # from line 47, col 35.
        write(u''' (&instance->state);
        /* Initialize the other attributes here.*/
    }

    return instance;
}

/* Dinamico */
/* USING:
    ''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 56, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 56, col 5.
        write(u'''Ptr p = create''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 56, col 40
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 56, col 40.
        write(u'''();
    ''')
        _v = VFFSL(SL,"state.start.name",True) # u'${state.start.name}' on line 57, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${state.start.name}')) # from line 57, col 5.
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 57, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 57, col 24.
        write(u'''(p);
*/
/*
''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 60, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 60, col 1.
        write(u'''Ptr create''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 60, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 60, col 32.
        write(u''' (void)
{
    message("** create''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 62, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 62, col 23.
        write(u''' **");

    ''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 64, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 64, col 5.
        write(u'''Ptr instance = malloc (sizeof *instance);

    if (NULL != instance)
    {
        ''')
        _v = VFFSL(SL,"state.transitionTo.name",True) # u'${state.transitionTo.name}' on line 68, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${state.transitionTo.name}')) # from line 68, col 9.
        _v = VFN(VFFSL(SL,"state.stop.name",True),"capitalize",False)() # u'${state.stop.name.capitalize()}' on line 68, col 35
        if _v is not None: write(_filter(_v, rawExpr=u'${state.stop.name.capitalize()}')) # from line 68, col 35.
        write(u''' (&instance->state);
    }
    return instance;
}
*/

void destroy''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 74, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 74, col 13.
        write(u''' (''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 74, col 41
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 74, col 41.
        write(u'''Ptr instance)
{
    message("** destroy''')
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 76, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 76, col 24.
        write(u''' **");

    free (instance);
}

void ''')
        _v = VFFSL(SL,"state.start.name",True) # u'${state.start.name}' on line 81, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${state.start.name}')) # from line 81, col 6.
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 81, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 81, col 25.
        write(u''' (''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 81, col 53
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 81, col 53.
        write(u'''Ptr instance)
{
    /*
    message("** ABSTRACT: ''')
        _v = VFFSL(SL,"state.start.name",True) # u'${state.start.name}' on line 84, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${state.start.name}')) # from line 84, col 27.
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 84, col 46
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 84, col 46.
        write(u''' **");
    */
    instance->state.''')
        _v = VFN(VFFSL(SL,"state.start.name",True),"lower",False)() # u'${state.start.name.lower()}' on line 86, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${state.start.name.lower()}')) # from line 86, col 21.
        write(u''' (&instance->state);
}

void ''')
        _v = VFFSL(SL,"state.stop.name",True) # u'${state.stop.name}' on line 89, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${state.stop.name}')) # from line 89, col 6.
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 89, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 89, col 24.
        write(u''' (''')
        _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 89, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 89, col 52.
        write(u'''Ptr instance)
{
    /*
    message("** ABSTRACT: ''')
        _v = VFFSL(SL,"state.stop.name",True) # u'${state.stop.name}' on line 92, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${state.stop.name}')) # from line 92, col 27.
        _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 92, col 45
        if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 92, col 45.
        write(u''' **");
    */

    instance->state.''')
        _v = VFN(VFFSL(SL,"state.stop.name",True),"lower",False)() # u'${state.stop.name.lower()}' on line 95, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${state.stop.name.lower()}')) # from line 95, col 21.
        write(u''' (&instance->state);
}

''')
        if len(VFFSL(SL,"state.states",True)) > 0: # generated from line 98, col 1
            for i in range(0, len(VFFSL(SL,"state.states",True))): # generated from line 99, col 1
                write(u'''void ''')
                _v = VFN(VFN(VFFSL(SL,"state",True),"states",True)[i],"name",True) # u'${state.states[i].name}' on line 100, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${state.states[i].name}')) # from line 100, col 6.
                _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 100, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 100, col 29.
                write(u''' (''')
                _v = VFFSL(SL,"state.context.name",True) # u'${state.context.name}' on line 100, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'${state.context.name}')) # from line 100, col 57.
                write(u'''Ptr instance)
{
    /*
    message("** ABSTRACT: ''')
                _v = VFN(VFN(VFFSL(SL,"state",True),"states",True)[i],"name",True) # u'${state.states[i].name}' on line 103, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${state.states[i].name}')) # from line 103, col 27.
                _v = VFN(VFFSL(SL,"state.name",True),"capitalize",False)() # u'${state.name.capitalize()}' on line 103, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'${state.name.capitalize()}')) # from line 103, col 50.
                write(u''' **");
    */

    instance->state.''')
                _v = VFN(VFN(VFN(VFFSL(SL,"state",True),"states",True)[i],"name",True),"lower",False)() # u'${state.states[i].name.lower()}' on line 106, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${state.states[i].name.lower()}')) # from line 106, col 21.
                write(u''' (&instance->state);
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_Context_c= 'respond'

## END CLASS DEFINITION

if not hasattr(Context_c, '_initCheetahAttributes'):
    templateAPIClass = getattr(Context_c, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(Context_c)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=Context_c()).run()


