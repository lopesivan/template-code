#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post1'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 1)
__CHEETAH_genTime__ = 1657526918.2630663
__CHEETAH_genTimestamp__ = 'Mon Jul 11 05:08:38 2022'
__CHEETAH_src__ = '../m/enable_ac.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Jul 11 05:08:36 2022'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class enable_ac(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(enable_ac, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''file: ''')
        _v = VFFSL(SL,"data.name",True) # '${data.name}' on line 1, col 7
        if _v is not None: write(_filter(_v, rawExpr='${data.name}')) # from line 1, col 7.
        write('''
-----------------8<-----------------------8<---------------------------------
''')
        if VFFSL(SL,"data.arg.value",True) == 'true': # generated from line 3, col 1
            write('''dnl The variable ''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 4, col 18
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 4, col 18.
            write(''' is TRUE
dnl Usage:
dnl * CONVERT TO FALSE
dnl ----------------------------------------they are equivalent
dnl ./configure  --enable-''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 8, col 27
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 8, col 27.
            write('''=no
dnl ./configure  --disable-''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 9, col 28
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 9, col 28.
            write('''
dnl
dnl * IN C CODE:
dnl #if ''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 12, col 10
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 12, col 10.
            write('''  // <- default: TRUE
dnl     printf ("%s is TRUE\\n", "''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 13, col 34
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 13, col 34.
            write('''");
dnl #else // --disable-''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 14, col 25
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 14, col 25.
            write('''
\t\t   // <- FALSE
dnl     printf ("%s is FALSE\\n", "''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 16, col 35
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 16, col 35.
            write('''");
dnl #endif

m4_include([m4/autotools_disable_''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 19, col 34
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 19, col 34.
            write('''.m4])
----------------->8----------------------->8-------------------------------->8

file: m4/autotools_disable_''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 22, col 28
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 22, col 28.
            write('''.m4]
-----------------8<-----------------------8<---------------------------------
dnl [ --disable-''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 24, col 17
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 24, col 17.
            write(''' ]
dnl
dnl
dnl     |----------------------+---------------+-------|
dnl     | Command Line         | Variable      | State |
dnl     |----------------------+---------------+-------|
dnl     | ""                   | WITH_''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 30, col 39
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 30, col 39.
            write(''' | 1     | <- default
dnl     | "--disable-''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 31, col 22
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 31, col 22.
            write('''" | WITH_''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 31, col 73
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 31, col 73.
            write(''' | 0     |
dnl     |----------------------+---------------+-------|
dnl


AC_ARG_ENABLE([''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 36, col 16
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 36, col 16.
            write('''],
  [AS_HELP_STRING([--disable-''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '-') # '${data.arg.name.lower().replace(" ", \'-\')}' on line 37, col 30
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'-\')}')) # from line 37, col 30.
            write('''],
    [disable ''')
            _v = VFFSL(SL,"data.arg.name",True) # '${data.arg.name}' on line 38, col 14
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name}')) # from line 38, col 14.
            write(''' @<:@default: no@:>@])],
  [''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 39, col 4
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 39, col 4.
            write('''=${enableval}], [''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 39, col 64
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 39, col 64.
            write('''=yes])

if test "x${''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 41, col 14
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 41, col 14.
            write('''}" = xyes; then
   AC_DEFINE(''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 42, col 14
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 42, col 14.
            write(''', 1, [Enable args])
fi

dnl -----------------------------------------------

AM_CONDITIONAL([WITH_''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 47, col 22
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 47, col 22.
            write('''], [test x${''')
            _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 47, col 77
            if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 47, col 77.
            write('''} = xyes])

0000


''')
        write('''

''')
        _v = VFN(VFFSL(SL,"data.arg.name",True),"replace",False)(" ", '-') # '${data.arg.name.replace(" ", \'-\')}' on line 55, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.replace(" ", \'-\')}')) # from line 55, col 1.
        write('''
''')
        _v = VFN(VFFSL(SL,"data.arg.name",True),"replace",False)(" ", '_') # '${data.arg.name.replace(" ", \'_\')}' on line 56, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.replace(" ", \'_\')}')) # from line 56, col 1.
        write('''

''')
        _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"upper",False)(),"replace",False)(" ", '_') # '${data.arg.name.upper().replace(" ", \'_\')}' on line 58, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.upper().replace(" ", \'_\')}')) # from line 58, col 1.
        write('''
''')
        _v = VFN(VFN(VFFSL(SL,"data.arg.name",True),"lower",False)(),"replace",False)(" ", '_') # '${data.arg.name.lower().replace(" ", \'_\')}' on line 59, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg.name.lower().replace(" ", \'_\')}')) # from line 59, col 1.
        write('''
0000

''')
        _v = VFFSL(SL,"data.name",True) # '${data.name}' on line 62, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.name}')) # from line 62, col 1.
        write('''
''')
        _v = VFFSL(SL,"data.arg",True) # '${data.arg}' on line 63, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg}')) # from line 63, col 1.
        write('''
''')
        _v = VFFSL(SL,"data.arg.name",True) # '${data.arg.name}' on line 64, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg.name}')) # from line 64, col 1.
        write('''
''')
        _v = VFFSL(SL,"data.arg.value",True) # '${data.arg.value}' on line 65, col 1
        if _v is not None: write(_filter(_v, rawExpr='${data.arg.value}')) # from line 65, col 1.
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_enable_ac = 'respond'

## END CLASS DEFINITION

if not hasattr(enable_ac, '_initCheetahAttributes'):
    templateAPIClass = getattr(enable_ac,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(enable_ac)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=enable_ac()).run()


