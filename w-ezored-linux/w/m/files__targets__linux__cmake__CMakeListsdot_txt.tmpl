\# Configurations
cmake_minimum_required(VERSION 3.20.0)
get_filename_component(CMAKE_SOURCE_REALPATH "\${CMAKE_SOURCE_DIR}/../../../../" REALPATH)

set(PROJECT_CONFIG_NAME
    "${data.project.name}"
    CACHE STRING "Project Name"
)

set(PROJECT_CONFIG_CXX_STANDARD
    "17"
    CACHE STRING "Cpp Standard"
)

set(PROJECT_TARGET_NAME
    "${data.name}"
    CACHE STRING "Target Name"
)

set(PROJECT_CONFIG_VERSION
    "${data.project.version}"
    CACHE STRING "Version"
)

set(PROJECT_CONFIG_ARCH
    "${data.project.arch}"
    CACHE STRING "Architecture"
)

set(PROJECT_ROOT_PATH \${CMAKE_SOURCE_REALPATH})

set(PROJECT_BUILD_PATH
    \${PROJECT_ROOT_PATH}/build/\${PROJECT_TARGET_NAME}/\${CMAKE_BUILD_TYPE}/\${PROJECT_CONFIG_ARCH}
    CACHE INTERNAL ""
)

\# Project
project(\${PROJECT_CONFIG_NAME})

\# Conan
include(\${PROJECT_BUILD_PATH}/conan/conanbuildinfo.cmake)
conan_basic_setup()

\# Common
include(\${PROJECT_ROOT_PATH}/files/common/cmake/common.cmake)

\# Flags
set(CMAKE_C_FLAGS
    "\${CMAKE_C_FLAGS} \${PROJECT_CMAKE_C_FLAGS}"
    CACHE INTERNAL ""
)
set(CMAKE_CXX_FLAGS
    "\${CMAKE_CXX_FLAGS} \${PROJECT_CMAKE_CXX_FLAGS}"
    CACHE INTERNAL ""
)

set(CMAKE_CXX_FLAGS_DEBUG "\${CMAKE_CXX_FLAGS} \${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")
set(CMAKE_CXX_FLAGS_MINSIZEREL "\${CMAKE_CXX_FLAGS} \${CMAKE_CXX_FLAGS_MINSIZEREL} -Os")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "\${CMAKE_CXX_FLAGS} \${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g")
set(CMAKE_CXX_FLAGS_RELEASE "\${CMAKE_CXX_FLAGS} \${CMAKE_CXX_FLAGS_RELEASE} -O3")

\# Project
include_directories(\${PROJECT_HEADER_SEARCH_PATHS})
link_directories(\${PROJECT_LIBRARY_SEARCH_PATHS})

add_executable(\${PROJECT_CONFIG_NAME} \${PROJECT_SOURCE_FILES_MERGED})

target_link_libraries(\${PROJECT_CONFIG_NAME} "\${PROJECT_LIBRARY_LINKS}")
target_link_libraries(\${PROJECT_CONFIG_NAME} "\${PROJECT_FRAMEWORK_LINKS}")
target_link_libraries(\${PROJECT_CONFIG_NAME} "\${CONAN_LIBS}")

set_target_properties(
    \${PROJECT_CONFIG_NAME}
    PROPERTIES CXX_STANDARD "\${PROJECT_CONFIG_CXX_STANDARD}"
               CXX_STANDARD_REQUIRED YES
               CXX_EXTENSIONS NO
               PUBLIC_HEADER "\${PROJECT_HEADER_FILES}"
)

target_compile_options(\${PROJECT_CONFIG_NAME} PUBLIC "\${PROJECT_COMPILE_OPTIONS}")

target_compile_definitions(\${PROJECT_CONFIG_NAME} PRIVATE PROJECT_CONFIG_VERSION="\${PROJECT_CONFIG_VERSION}" HAS_UNCAUGHT_EXCEPTIONS=0)
